{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "SeminarDesk Private API (unreleased next version)",
    "description" : "Provides access to these resources: events, dates, profiles, bookings, invoices and certificates. <p>**Note**: This is the upcoming version which is not yet released.</p>\n",
    "termsOfService" : "https://www.seminardesk.de/nutzungsbedingungen/",
    "contact" : {
      "name" : "SeminarDesk support",
      "url" : "https://www.seminardesk.de",
      "email" : "support@seminardesk.de"
    },
    "version" : "v1-next"
  },
  "servers" : [ {
    "url" : "https://{tenantId}.seminardesk.de/private-api",
    "variables" : {
      "tenantId" : {
        "description" : "Unique tenant ID assigned to each customer by SeminarDesk",
        "default" : "demo"
      }
    }
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "paths" : {
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Retrieves a list of events",
        "operationId" : "getEvents",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Creates a new event",
        "operationId" : "createEvent",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            },
            "links" : {
              "GetEventById" : {
                "operationId" : "getEvent",
                "parameters" : {
                  "id" : "$response.body#/id"
                },
                "description" : "The `id` value returned can be used as the `id` parameter in `GET /events/{id}`\n"
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Retrieves the details of an event",
        "operationId" : "getEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Events" ],
        "summary" : "Deletes an event",
        "operationId" : "deleteEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted successfully"
          },
          "409" : {
            "description" : "Request cannot be completed due to a conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Events" ],
        "summary" : "Updates one or more properties of an event",
        "operationId" : "patchEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/dates" : {
      "get" : {
        "tags" : [ "Events", "Dates" ],
        "summary" : "Retrieves the list of dates of an event",
        "operationId" : "getEventEventDates",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDatesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Events", "Dates" ],
        "summary" : "Creates a new event date",
        "operationId" : "createEventDate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEventDate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created event date",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDate"
                }
              }
            },
            "links" : {
              "GetEventDateById" : {
                "operationId" : "getEventDate",
                "parameters" : {
                  "id" : "$response.body#/id"
                },
                "description" : "The `id` value returned can be used as the `id` parameter in `GET /dates/{id}`\n"
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/bookings" : {
      "post" : {
        "tags" : [ "Events", "Bookings" ],
        "summary" : "Creates a new booking for all dates of this event that have a status which allows bookings",
        "description" : "Note: This could result in either *one* or *multiple bookings* being created based on the event's \"booking mode\" setting.\n",
        "operationId" : "createBookingForEventDates",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "ignoreExistingBookings",
          "in" : "query",
          "description" : "If this is set to `true`, then existing bookings for any of the provided dates/guests will be ignored – otherwise this would result in a 400 error",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEventBooking"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created booking(s)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/attendance-fee-price-lists" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Retrieves the list of attendance fee price lists of an event",
        "operationId" : "getEventAttendanceFeePriceLists",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AttendanceFeePriceListsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Creates a new attendance fee price list to be used for dates of this event",
        "operationId" : "createAttendanceFeePriceList",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAttendanceFeePriceList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created price list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AttendanceFeePriceList"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/additional-fields/{fieldId}" : {
      "patch" : {
        "tags" : [ "Events" ],
        "summary" : "Updates the value of the specified additional field",
        "operationId" : "patchEventAdditionalField",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Numeric ID of the additional field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchEventAdditionalField"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/dates" : {
      "get" : {
        "tags" : [ "Dates" ],
        "summary" : "Retrieves a list of event dates",
        "operationId" : "getEventDates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDatesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/dates/{id}" : {
      "get" : {
        "tags" : [ "Dates" ],
        "summary" : "Retrieves the details of an event date",
        "operationId" : "getEventDate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDate"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Dates" ],
        "summary" : "Deletes an event date",
        "operationId" : "deleteEventDate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted successfully"
          },
          "409" : {
            "description" : "Request cannot be completed due to a conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Dates" ],
        "summary" : "Updates one or more properties of an event date",
        "operationId" : "patchEventDate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchEventDate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/dates/{id}/bookings" : {
      "get" : {
        "tags" : [ "Dates", "Bookings" ],
        "summary" : "Retrieves the bookings for an event date",
        "operationId" : "getEventDateBookings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/dates/{id}/additional-fields/{fieldId}" : {
      "patch" : {
        "tags" : [ "Dates" ],
        "summary" : "Updates the value of the specified additional field",
        "operationId" : "patchEventDateAdditionalField",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Numeric ID of the additional field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchEventDateAdditionalField"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Retrieves a list of profiles",
        "operationId" : "getProfiles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfilesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Retrieves the details of a profile",
        "operationId" : "getProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Profile"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/bookings" : {
      "get" : {
        "tags" : [ "Profiles", "Bookings" ],
        "summary" : "Retrieves the bookings for a profile",
        "operationId" : "getProfileBookings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/invoices" : {
      "get" : {
        "tags" : [ "Profiles", "Invoices" ],
        "summary" : "Retrieves a list of invoices for a profile",
        "operationId" : "getProfileInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingOrProfileInvoicesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/additional-fields" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Retrieves a profile's list of additional field values",
        "operationId" : "getProfileAdditionalFields",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfileAdditionalFieldsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/additional-fields/{fieldId}" : {
      "patch" : {
        "tags" : [ "Profiles" ],
        "summary" : "Updates the value of the specified additional field",
        "operationId" : "patchProfileAdditionalField",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Numeric ID of the additional field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchProfileAdditionalField"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/activities" : {
      "post" : {
        "tags" : [ "Profiles" ],
        "summary" : "Adds a new activity entry to a profile",
        "operationId" : "addProfileActivity",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateActivity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created activity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfileActivity"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}/certificates" : {
      "get" : {
        "tags" : [ "Profiles", "Certificates" ],
        "summary" : "Retrieves the existing certificates of a person/facilitator profile",
        "description" : "*Note*: In case the profile identified by the given ID is not a person or facilitator, this will return a 400 error.",
        "operationId" : "getCertificatesByProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfileCertificatesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/persons" : {
      "get" : {
        "tags" : [ "Profiles", "Persons" ],
        "summary" : "Retrieves a list of person profiles",
        "operationId" : "getPersonProfiles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonProfilesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Profiles", "Persons" ],
        "summary" : "Creates a new person profile",
        "operationId" : "createPersonProfile",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created person profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonProfile"
                }
              }
            },
            "links" : {
              "GetBookingById" : {
                "operationId" : "getPersonProfile",
                "parameters" : {
                  "id" : "$response.body#/id"
                },
                "description" : "The `id` value returned can be used as the `id` parameter in `GET /persons/{id}`\n"
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{id}" : {
      "get" : {
        "tags" : [ "Profiles", "Persons" ],
        "summary" : "Retrieves the details of a person profile",
        "operationId" : "getPersonProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonProfile"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Profiles", "Persons" ],
        "summary" : "Updates one or more properties of a person profile",
        "operationId" : "patchPersonProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchPersonProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/facilitators" : {
      "get" : {
        "tags" : [ "Profiles", "Facilitators" ],
        "summary" : "Retrieves a list of facilitator profiles",
        "operationId" : "getFacilitatorProfiles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FacilitatorProfilesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Profiles", "Facilitators" ],
        "summary" : "Creates a new facilitator profile",
        "operationId" : "createFacilitatorProfile",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FacilitatorProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created facilitator profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FacilitatorProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/facilitators/{id}" : {
      "get" : {
        "tags" : [ "Profiles", "Facilitators" ],
        "summary" : "Retrieves the details of a facilitator profile",
        "operationId" : "getFacilitatorProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FacilitatorProfile"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Profiles", "Facilitators" ],
        "summary" : "Updates one or more properties of a facilitator profile",
        "operationId" : "patchFacilitatorProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchFacilitatorProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Retrieves a list of organization/company profiles",
        "operationId" : "getOrganizationProfiles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationProfilesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Retrieves the details of an organization/company profile",
        "operationId" : "getOrganizationProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationProfile"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings" : {
      "get" : {
        "tags" : [ "Bookings" ],
        "summary" : "Retrieves a list of bookings",
        "operationId" : "getBookings",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_3"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Bookings" ],
        "summary" : "Creates a new booking",
        "description" : "Note: This could result in *multiple bookings* being created in case the payload contains guests with event dates belonging to different events.\n",
        "operationId" : "createBooking",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBooking"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created booking(s)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}" : {
      "get" : {
        "tags" : [ "Bookings" ],
        "summary" : "Retrieves the details of a booking",
        "operationId" : "getBooking",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/guests" : {
      "get" : {
        "tags" : [ "Bookings" ],
        "summary" : "Retrieves the guests of a booking",
        "operationId" : "getBookingGuests",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingGuestsList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/invoices" : {
      "get" : {
        "tags" : [ "Bookings", "Invoices" ],
        "summary" : "Retrieves a list of invoices for a booking",
        "operationId" : "getBookingInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingOrProfileInvoicesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/cancel" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Sets a booking's status to \"Canceled\"",
        "operationId" : "markBookingAsCanceled",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetBookingStatusCanceled"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Booking status changed successfully, returns the updated booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/confirm" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Sets a booking's status to \"Confirmed\"",
        "description" : "Only bookings in status \"Pending\", \"Wait list\" or \"Canceled wait list\" can be confirmed.",
        "operationId" : "markBookingAsConfirmed",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetBookingStatusConfirmed"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Booking status changed successfully, returns the updated booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/no-show" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Sets a booking's status to \"No-show\"",
        "description" : "Only bookings in status \"Confirmed\" can be set to \"No-show\".",
        "operationId" : "markBookingAsNoShow",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Booking status changed successfully, returns the updated booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/wait-list" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Sets a booking's status to \"Wait list\"",
        "description" : "Only bookings in status \"Pending\" or \"Confirmed\" can be set to \"Wait list\".",
        "operationId" : "markBookingAsWaitList",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetBookingStatusWaitList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Booking status changed successfully, returns the updated booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/delete" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Deletes a booking",
        "description" : "Only bookings in status \"Pending\", \"Wait list\" or \"Canceled wait list\" can be deleted.",
        "operationId" : "deleteBooking",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteBooking"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Booking deleted successfully"
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}/reset" : {
      "put" : {
        "tags" : [ "Bookings" ],
        "summary" : "Sets a booking's status back to \"Pending\"",
        "description" : "Only bookings in status \"Canceled\" or \"No-show\" can be reset.",
        "operationId" : "resetBookingStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Booking status changed successfully, returns the updated booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/guests/{id}" : {
      "get" : {
        "tags" : [ "Booking Guests" ],
        "summary" : "Retrieves the details of a booking guest",
        "operationId" : "getBookingGuest",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingGuest"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/guests/{id}/misc-items" : {
      "post" : {
        "tags" : [ "Booking Guests" ],
        "summary" : "Adds a miscelleaneous item to the booking guest",
        "description" : "Note: Properties of the misc item (i.e. age and price level) will be considered, in case they do not match the guest, a 400 error will be returned.\n",
        "operationId" : "addMiscItemToGuest",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddBookingGuestMiscItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created booking item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingGuestItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/guest-items/{id}" : {
      "patch" : {
        "tags" : [ "Guest Items" ],
        "summary" : "Updates one or more properties of a guest item",
        "operationId" : "patchGuestItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchBookingGuestItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK, returns the updated item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingGuestItem"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Retrieves a list of invoices",
        "operationId" : "getInvoices",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/filter_4"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesList"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Retrieves the details of an invoice",
        "operationId" : "getInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "summary" : "Deletes a draft invoice",
        "operationId" : "deleteDraftInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted successfully"
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/cancel" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Cancels a posted invoice",
        "operationId" : "cancelPostedInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelInvoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invoice canceled successfully, returns the canceled invoice and the cancelation invoice",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceCancelationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/payments" : {
      "post" : {
        "tags" : [ "Invoices", "Payments" ],
        "summary" : "Adds a payment to an invoice",
        "description" : "Note: In the background, payments will be added to the related source (e.g. a booking) instead of the invoice directly. So this method can only be used for invoices with one single source.\n",
        "operationId" : "addPaymentToInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePayment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK, contains the newly created payment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/external-references" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Adds an external reference to an invoice",
        "operationId" : "addExternalReferenceToInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalReference"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the the newly created external reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/pdf" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Retrieves the PDF file contents of an invoice",
        "operationId" : "getInvoicePdf",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/certificates" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieves a list of certificates",
        "operationId" : "getCertificates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/page"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificatesList"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Certificates" ],
        "summary" : "Imports a certificate",
        "description" : "*Note*: Prerequisites will not be considered, the certificate will be created with the provided data.",
        "operationId" : "importCertificate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Certificate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created, contains the newly created certificate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Certificate"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/certificates/{id}" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieves the details of a certificate",
        "operationId" : "getCertificate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Certificate"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Certificates" ],
        "summary" : "Updates one or more properties of a certificate",
        "operationId" : "patchCertificate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Numeric ID of the item",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "regeneratePdf",
          "in" : "query",
          "description" : "If this is set to `true`, the certificate PDF file that may already exist is regenerated and overwritten",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchCertificate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated successfully"
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/certificate-types" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieves the list of certificate types",
        "operationId" : "getCertificateTypes",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificateTypesList"
                }
              }
            }
          },
          "400" : {
            "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "API key is missing or invalid",
            "headers" : {
              "WWW_Authenticate" : {
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "API key does not have required permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "The resource does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "501" : {
            "description" : "Request cannot be handled, private API not active or required module not enabled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BaseList" : {
        "type" : "object",
        "properties" : {
          "meta" : {
            "$ref" : "#/components/schemas/BaseList_meta"
          }
        }
      },
      "BaseModelProperties" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "notes" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "tasks" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "objectInfo" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/ObjectMetaInfo"
            } ]
          },
          "externalReferences" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExternalReference"
            }
          }
        }
      },
      "ProfileAdditionalFieldsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AdditionalFieldWithValue"
        }
      },
      "ProfilesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Profile"
              }
            }
          }
        } ]
      },
      "PersonProfilesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PersonProfile"
              }
            }
          }
        } ]
      },
      "FacilitatorProfilesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FacilitatorProfile"
              }
            }
          }
        } ]
      },
      "InvoiceCancelationResponse" : {
        "required" : [ "cancelationInvoice", "originalInvoice" ],
        "type" : "object",
        "properties" : {
          "originalInvoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "cancelationInvoice" : {
            "$ref" : "#/components/schemas/Invoice"
          }
        }
      },
      "OrganizationProfilesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/OrganizationProfile"
              }
            }
          }
        } ]
      },
      "BookingGuestsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/BookingGuest"
        }
      },
      "ProfileCertificatesList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Certificate"
        }
      },
      "CertificatesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Certificate"
              }
            }
          }
        } ]
      },
      "CertificateTypesList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CertificateType"
        }
      },
      "CertificateType" : {
        "required" : [ "id", "isActive", "name", "officialTitle", "provider" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "provider" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          },
          "name" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : false
          },
          "officialTitle" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Title or code as given by the provider",
            "nullable" : false
          },
          "defaultValidityInMonths" : {
            "type" : "integer",
            "description" : "If present, indicates the number of months a certificate will be valid after issuing",
            "nullable" : true
          },
          "takeoverPeriodInDays" : {
            "type" : "integer",
            "nullable" : true
          },
          "takeoverSource" : {
            "type" : "string",
            "description" : "Determines whether the takeover period should only consider certificates of the same type (ONLY_SAME_TYPE) or also the certificates from the requirements (REQUIREMENTS)",
            "nullable" : true,
            "enum" : [ "ONLY_SAME_TYPE", "REQUIREMENTS" ]
          },
          "requirements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/CertificateType"
            }
          },
          "requirementsAggregation" : {
            "type" : "string",
            "description" : "Determines whether all or only at least one of the requirements must be fulfilled",
            "nullable" : true,
            "enum" : [ "ALL", "ANY" ]
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "isActive" : {
            "type" : "boolean"
          }
        }
      },
      "PatchCertificate" : {
        "type" : "object",
        "properties" : {
          "internalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "externalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "number" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Certificate" : {
        "required" : [ "id", "objectInfo", "owner", "status", "type", "validFrom" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "owner" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "type" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            }, {
              "type" : "object",
              "properties" : {
                "officialTitle" : {
                  "maxLength" : 255,
                  "type" : "string"
                },
                "provider" : {
                  "readOnly" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/NamedIdReference"
                  } ]
                }
              },
              "readOnly" : true
            } ]
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "validUntil" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "usedTakeover" : {
            "type" : "integer",
            "description" : "Number of days that were \"taken over\" from a required certificate or null",
            "nullable" : true,
            "readOnly" : true
          },
          "takeoverSourceCertificate" : {
            "$ref" : "#/components/schemas/Certificate_takeoverSourceCertificate"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "UPCOMING", "VALID", "EXPIRED", "VOID" ]
          },
          "yieldedBy" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "INTERNAL", "EXTERNAL" ]
          },
          "externalIssuer" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true
          },
          "yieldedByEventDate" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "number" : {
            "type" : "string",
            "nullable" : true
          },
          "internalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "externalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "voidAt" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true,
            "readOnly" : true
          },
          "voidReason" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "eligibilityCheckOverridden" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "objectInfo" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/ObjectMetaInfo"
            } ]
          }
        }
      },
      "BookingsList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Booking"
              }
            }
          }
        } ]
      },
      "CreateEventBooking" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CreateBooking"
        }, {
          "type" : "object",
          "properties" : {
            "guests" : {
              "minItems" : 1,
              "type" : "array",
              "nullable" : false,
              "items" : {
                "$ref" : "#/components/schemas/EventBookingGuest"
              }
            }
          }
        } ]
      },
      "CreateBooking" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Booking"
        }, {
          "type" : "object",
          "properties" : {
            "notes" : {
              "readOnly" : true
            },
            "tasks" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "AddBookingGuestMiscItem" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "ID of the misc item",
            "format" : "int64",
            "nullable" : false
          },
          "manualPrice" : {
            "type" : "number",
            "description" : "In case misc item has \"manual\" mode of calculation, the price must be specified",
            "format" : "double",
            "nullable" : true
          },
          "quantity" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "This is only allowed in the case of a item of type \"misc\"",
            "nullable" : true
          }
        }
      },
      "CreatePayment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentProperties"
        }, {
          "$ref" : "#/components/schemas/PaymentRequiredProperties"
        } ]
      },
      "CreateActivity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActivityProperties"
        }, {
          "$ref" : "#/components/schemas/ActivityRequiredProperties"
        } ]
      },
      "ActivityRequiredProperties" : {
        "required" : [ "activityType", "from", "title" ],
        "type" : "object"
      },
      "ActivityProperties" : {
        "type" : "object",
        "properties" : {
          "activityType" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          },
          "title" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : false,
            "example" : "Example Activity"
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "actor" : {
            "description" : "User who performed this activity",
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "BookingStatusChange" : {
        "type" : "object",
        "properties" : {
          "sendStatusEmail" : {
            "type" : "boolean"
          }
        }
      },
      "SetBookingStatusCanceled" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BookingStatusChange"
        }, {
          "required" : [ "reason" ],
          "type" : "object",
          "properties" : {
            "reason" : {
              "type" : "string",
              "description" : "Reason for the cancelation",
              "nullable" : false
            }
          }
        } ]
      },
      "DeleteBooking" : {
        "required" : [ "reason" ],
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason for the deletion",
            "nullable" : false
          }
        }
      },
      "SetBookingStatusConfirmed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BookingStatusChange"
        } ]
      },
      "SetBookingStatusWaitList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BookingStatusChange"
        } ]
      },
      "CancelInvoice" : {
        "type" : "object",
        "properties" : {
          "remarks" : {
            "type" : "string",
            "description" : "Optional \"cancelation remarks\" that will be saved alongside the canceled invoice",
            "nullable" : true
          }
        }
      },
      "Booking" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModelProperties"
        }, {
          "$ref" : "#/components/schemas/BookingProperties"
        }, {
          "$ref" : "#/components/schemas/BookingRequiredProperties"
        } ]
      },
      "BookingRequiredProperties" : {
        "required" : [ "booker", "guests", "status" ],
        "type" : "object"
      },
      "BookingProperties" : {
        "type" : "object",
        "properties" : {
          "booker" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "status" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingStatus"
            } ],
            "default" : "PENDING"
          },
          "externalRemarks" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "internalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "paymentMethod" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "specialRequestsPriceList" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "labels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Label"
            }
          },
          "marker" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true,
            "example" : "Sample Marker"
          },
          "referenceNumbers" : {
            "type" : "string",
            "nullable" : true
          },
          "voucherCode" : {
            "type" : "string",
            "nullable" : true
          },
          "guests" : {
            "minItems" : 1,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/BookingGuest"
            }
          },
          "numberOfInvoices" : {
            "minimum" : 0,
            "type" : "integer",
            "readOnly" : true
          },
          "openBalance" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "payments" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Payment"
            }
          },
          "externalIdentifier" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true
          },
          "onlinePaymentStatus" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "PENDING", "COMPLETED", "FAILED" ]
          }
        }
      },
      "Payment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentProperties"
        }, {
          "$ref" : "#/components/schemas/PaymentRequiredProperties"
        } ]
      },
      "PaymentRequiredProperties" : {
        "required" : [ "amount", "date", "method" ],
        "type" : "object"
      },
      "PaymentProperties" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount can be a negative or positive number",
            "format" : "double",
            "nullable" : false,
            "example" : 23.42
          },
          "method" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/PaymentMethod"
            } ]
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "BookingStatus" : {
        "type" : "string",
        "enum" : [ "PENDING", "CONFIRMED", "WAIT_LIST", "CANCELED", "WAIT_LIST_CANCELED", "NO_SHOW" ]
      },
      "EventBookingGuest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BookingGuest"
        }, {
          "type" : "object",
          "properties" : {
            "eventDate" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "BookingGuest" : {
        "required" : [ "eventDate", "guest" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "eventDate" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "event" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "guest" : {
            "$ref" : "#/components/schemas/BookingGuest_guest"
          },
          "status" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingStatus"
            } ]
          },
          "guestType" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/GuestType"
            } ]
          },
          "priceLevel" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "specialRequests" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NamedIdReference"
            }
          },
          "teachingUnits" : {
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "marker" : {
            "type" : "string",
            "nullable" : true
          },
          "attendanceType" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingGuestAttendanceType"
            } ]
          },
          "items" : {
            "type" : "array",
            "nullable" : false,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/BookingGuestItem"
            }
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "readOnly" : true
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "readOnly" : true
          },
          "voucherCode" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          }
        }
      },
      "BookingGuestItem" : {
        "required" : [ "status", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "type" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingGuestItemType"
            } ]
          },
          "status" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingStatus"
            } ]
          },
          "begin" : {
            "type" : "string",
            "description" : "If not provided, will default to begin of booking guest",
            "format" : "date-time",
            "nullable" : true
          },
          "end" : {
            "type" : "string",
            "description" : "If not provided, will default to end of booking guest",
            "format" : "date-time",
            "nullable" : true
          },
          "text" : {
            "type" : "string",
            "nullable" : true
          },
          "priceList" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "priceListItemId" : {
            "description" : "Contains the ID of the price list item related to this item, if any",
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "calculatedPrice" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "actualPrice" : {
            "type" : "number",
            "format" : "double",
            "nullable" : true
          },
          "taxRate" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/TaxRate"
            } ]
          },
          "quantity" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "This is only considered for items of type \"misc\"",
            "nullable" : true
          }
        }
      },
      "BookingGuestItemType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "EVENT", "ACCOMMODATION", "MEALS", "MISC", "RENT", "CREDIT", "PAYMENT_FEE" ]
          },
          "logicalType" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "EVENT", "ACCOMMODATION", "MEALS", "MISC", "PAYMENT_FEE" ]
          }
        }
      },
      "GuestType" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "name" : {
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "PARTICIPANT", "FACILITATOR", "ASSISTANT", "COMPANION" ]
          }
        }
      },
      "PaymentMethod" : {
        "required" : [ "code", "name" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Unique code of this payment method",
            "nullable" : false
          }
        }
      },
      "EventsList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        } ]
      },
      "AttendanceFeePriceListsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AttendanceFeePriceList"
        }
      },
      "CreateEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EventIncludingDates"
        } ]
      },
      "CreateAttendanceFeePriceList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AttendanceFeePriceList"
        } ]
      },
      "CreateEventDate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EventDate"
        } ]
      },
      "PatchEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EventProperties"
        }, {
          "type" : "object",
          "properties" : {
            "notes" : {
              "readOnly" : true
            },
            "tasks" : {
              "readOnly" : true
            },
            "attendanceFeePriceLists" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "PatchPersonProfile" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProfileProperties"
        }, {
          "$ref" : "#/components/schemas/PersonProfileProperties"
        }, {
          "type" : "object",
          "properties" : {
            "notes" : {
              "readOnly" : true
            },
            "tasks" : {
              "readOnly" : true
            },
            "additionalFields" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "PatchFacilitatorProfile" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PatchPersonProfile"
        }, {
          "$ref" : "#/components/schemas/FacilitatorProfileProperties"
        }, {
          "type" : "object",
          "properties" : {
            "notes" : {
              "readOnly" : true
            },
            "tasks" : {
              "readOnly" : true
            },
            "additionalFields" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "PatchBookingGuestItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BookingGuestItem"
        } ]
      },
      "PatchAdditionalField" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/AnyValue"
            } ]
          }
        }
      },
      "PatchProfileAdditionalField" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PatchAdditionalField"
        } ]
      },
      "PatchEventDateAdditionalField" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PatchAdditionalField"
        } ]
      },
      "PatchEventAdditionalField" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PatchAdditionalField"
        } ]
      },
      "PatchEventDate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EventDateProperties"
        }, {
          "type" : "object",
          "properties" : {
            "notes" : {
              "readOnly" : true
            },
            "tasks" : {
              "readOnly" : true
            },
            "facilitators" : {
              "description" : "When a value is provided, this will override the existing list of facilitators."
            },
            "equipment" : {
              "readOnly" : true
            },
            "revenues" : {
              "readOnly" : true
            },
            "costs" : {
              "readOnly" : true
            },
            "externalAccommodations" : {
              "readOnly" : true
            },
            "roomContingents" : {
              "readOnly" : true
            },
            "timetableEntries" : {
              "readOnly" : true
            },
            "functionRoomBookings" : {
              "readOnly" : true
            },
            "additionalFields" : {
              "readOnly" : true
            }
          }
        } ]
      },
      "EventIncludingDates" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Event"
        }, {
          "type" : "object",
          "properties" : {
            "dates" : {
              "type" : "array",
              "nullable" : true,
              "items" : {
                "$ref" : "#/components/schemas/EventDate"
              }
            }
          }
        } ]
      },
      "EventDatesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventDate"
              }
            }
          }
        } ]
      },
      "Event" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModelProperties"
        }, {
          "$ref" : "#/components/schemas/EventProperties"
        }, {
          "$ref" : "#/components/schemas/EventRequiredProperties"
        } ]
      },
      "ExternalReference" : {
        "required" : [ "externalId", "id", "system" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "system" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          },
          "externalId" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : false
          },
          "url" : {
            "maxLength" : 2083,
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          }
        }
      },
      "EventRequiredProperties" : {
        "required" : [ "bookingSettings", "internalOrganizer", "name", "publishingSettings" ],
        "type" : "object"
      },
      "EventProperties" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 255,
            "type" : "string",
            "example" : "My Sample Event Name 2023"
          },
          "shortName" : {
            "maxLength" : 25,
            "type" : "string",
            "nullable" : true,
            "example" : "MSEN 2023"
          },
          "dateCount" : {
            "minimum" : 0,
            "type" : "integer",
            "readOnly" : true
          },
          "nextDateBegin" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "firstDateBegin" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "lastDateEnd" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "usesDefaultEmailSettings" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "usesDefaultPublishingSettings" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "isPublished" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "facilitators" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/FacilitatorInfo"
            }
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "contactPersons" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "assignedUsers" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "internalOrganizer" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Organization"
            } ]
          },
          "externalOrganizer" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "contractPartner" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "color" : {
            "type" : "string",
            "nullable" : true,
            "example" : "#FF0000"
          },
          "labels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Label"
            }
          },
          "invoiceTemplate" : {
            "type" : "string",
            "nullable" : true
          },
          "bookingSettings" : {
            "$ref" : "#/components/schemas/EventProperties_bookingSettings"
          },
          "attendanceFeePriceLists" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttendanceFeePriceList"
            }
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "additionalFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdditionalFieldWithValue"
            }
          },
          "publishingSettings" : {
            "$ref" : "#/components/schemas/EventProperties_publishingSettings"
          },
          "statistics" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventAndDateStatistics"
            } ]
          }
        }
      },
      "EventAndDateStatistics" : {
        "type" : "object",
        "properties" : {
          "unconfirmedOrWaitingBookings" : {
            "type" : "integer",
            "nullable" : false
          },
          "unconfirmedOrWaitingGuests" : {
            "type" : "integer",
            "nullable" : false
          },
          "pendingParticipantGuests" : {
            "type" : "integer",
            "description" : "Number of pending guests of type \"participant\"",
            "nullable" : false
          },
          "confirmedBookings" : {
            "type" : "integer",
            "nullable" : false
          },
          "confirmedGuests" : {
            "type" : "integer",
            "nullable" : false
          },
          "confirmedParticipantGuests" : {
            "type" : "integer",
            "description" : "Number of confirmed guests of type \"participant\"",
            "nullable" : false
          },
          "totalBookings" : {
            "type" : "integer",
            "nullable" : false
          },
          "totalGuests" : {
            "type" : "integer",
            "nullable" : false
          },
          "availableSpots" : {
            "type" : "integer",
            "description" : "Number of bookable spots, based on the \"max. part\" or *null* in case this is not set",
            "nullable" : true
          }
        }
      },
      "Note" : {
        "required" : [ "scope", "text" ],
        "type" : "object",
        "properties" : {
          "scope" : {
            "type" : "string",
            "enum" : [ "GENERAL", "EVENT", "MEALS", "ACCOMMODATION" ]
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "Task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Note"
        }, {
          "required" : [ "dueDate" ],
          "type" : "object",
          "properties" : {
            "dueDate" : {
              "type" : "string",
              "format" : "date"
            },
            "assignedTo" : {
              "nullable" : true,
              "allOf" : [ {
                "$ref" : "#/components/schemas/User"
              } ]
            }
          }
        } ]
      },
      "AttendanceFeePriceList" : {
        "required" : [ "details", "id", "name", "order" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "name" : {
            "type" : "string",
            "nullable" : false
          },
          "earlyBookingDate" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "details" : {
            "minItems" : 1,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/AttendanceFeePriceListDetail"
            }
          }
        }
      },
      "AttendanceFeePriceListDetail" : {
        "required" : [ "calculationMode", "grossPrice", "isPublished", "minAge", "priceLevel", "taxRate" ],
        "type" : "object",
        "properties" : {
          "priceLevel" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          },
          "minAge" : {
            "minimum" : 0,
            "type" : "integer",
            "nullable" : false,
            "default" : 18
          },
          "grossPrice" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double",
            "nullable" : false
          },
          "grossRoomRent" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double",
            "nullable" : true
          },
          "calculationMode" : {
            "type" : "string",
            "nullable" : false,
            "enum" : [ "PER_ATTENDANCE", "PER_DAY" ]
          },
          "isSelfAssessment" : {
            "type" : "boolean",
            "nullable" : true
          },
          "grossSelfAssessmentMinPrice" : {
            "minimum" : 0,
            "format" : "double",
            "nullable" : true
          },
          "grossSelfAssessmentMaxPrice" : {
            "minimum" : 0,
            "format" : "double",
            "nullable" : true
          },
          "taxRate" : {
            "$ref" : "#/components/schemas/TaxRate"
          },
          "isPublished" : {
            "type" : "boolean",
            "default" : true
          },
          "publicName" : {
            "type" : "string",
            "nullable" : false
          },
          "order" : {
            "type" : "integer",
            "nullable" : true
          }
        }
      },
      "EventDate" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModelProperties"
        }, {
          "$ref" : "#/components/schemas/EventDateProperties"
        }, {
          "$ref" : "#/components/schemas/EventDateRequiredProperties"
        } ]
      },
      "EventDateRequiredProperties" : {
        "required" : [ "begin", "end", "name", "status" ],
        "type" : "object"
      },
      "EventDateProperties" : {
        "type" : "object",
        "properties" : {
          "eventId" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "name" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : false,
            "example" : "My Sample Event Date Name"
          },
          "shortName" : {
            "maxLength" : 25,
            "type" : "string",
            "nullable" : true,
            "example" : "Event Date #1"
          },
          "status" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventDateStatus"
            } ]
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "attendanceType" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/AttendanceType"
            } ]
          },
          "venue" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Venue"
            } ]
          },
          "teachingUnits" : {
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "minParticipants" : {
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "targetParticipants" : {
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "maxParticipants" : {
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : true
          },
          "eventCode" : {
            "type" : "string",
            "nullable" : true
          },
          "number" : {
            "type" : "string",
            "nullable" : true
          },
          "receptionSettings" : {
            "$ref" : "#/components/schemas/EventDateProperties_receptionSettings"
          },
          "serviceAndPriceSettings" : {
            "$ref" : "#/components/schemas/EventDateProperties_serviceAndPriceSettings"
          },
          "publishingSettings" : {
            "$ref" : "#/components/schemas/EventDateProperties_publishingSettings"
          },
          "additionalInfo" : {
            "type" : "string",
            "nullable" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Label"
            }
          },
          "additionalFields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdditionalFieldWithValue"
            }
          },
          "facilitators" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateFacilitator"
            }
          },
          "equipment" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateEquipment"
            }
          },
          "revenues" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/RevenueItem"
            }
          },
          "costs" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateCost"
            }
          },
          "externalAccommodations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateExternalAccommodation"
            }
          },
          "roomContingents" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateRoomContingent"
            }
          },
          "timetableEntries" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateTimeTableEntry"
            }
          },
          "documents" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateDocument"
            }
          },
          "functionRoomBookings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventDateFunctionRoomBooking"
            }
          },
          "statistics" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventAndDateStatistics"
            } ]
          }
        }
      },
      "EventDateStatus" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "readOnly" : true
          },
          "bookingAllowed" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "isCanceled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "publicationAllowed" : {
            "type" : "boolean",
            "readOnly" : true
          }
        }
      },
      "AttendanceType" : {
        "type" : "string",
        "enum" : [ "ONLINE", "ON_SITE", "SELECTABLE" ]
      },
      "BookingGuestAttendanceType" : {
        "type" : "string",
        "enum" : [ "ONLINE", "ON_SITE" ]
      },
      "EventDateFunctionRoomBooking" : {
        "required" : [ "begin", "end", "functionRoom", "isInternal", "status" ],
        "type" : "object",
        "properties" : {
          "functionRoom" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/FunctionRoom"
            } ]
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "enum" : [ "CONFIRMED", "REQUESTED", "BLOCKED", "OUT_OF_SERVICE", "DELETED" ]
          },
          "isInternal" : {
            "type" : "boolean",
            "nullable" : false
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "text" : {
            "type" : "string",
            "nullable" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "FunctionRoom" : {
        "required" : [ "cleaningFee", "dailyRent", "id", "isActive", "name", "order", "organization", "taxRate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "dailyRent" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double",
            "nullable" : true,
            "readOnly" : true
          },
          "cleaningFee" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double",
            "nullable" : true,
            "readOnly" : true
          },
          "taxRate" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/TaxRate"
            } ]
          },
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "bookingAccount" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "organization" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Organization"
            } ]
          },
          "isActive" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "order" : {
            "type" : "integer",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "EventDateDocument" : {
        "required" : [ "fileUrl", "isPublished" ],
        "type" : "object",
        "properties" : {
          "fileUrl" : {
            "type" : "string",
            "format" : "uri"
          },
          "title" : {
            "type" : "string"
          },
          "isPublished" : {
            "type" : "boolean",
            "description" : "If \"true\", then this document will be made available for all confirmed participants with booking page account"
          }
        }
      },
      "EventDateTimeTableEntry" : {
        "required" : [ "begin", "end", "location", "teachingUnits", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CLASS", "BREAK", "EXAM" ]
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time"
          },
          "end" : {
            "type" : "string",
            "format" : "date-time"
          },
          "location" : {
            "type" : "string"
          },
          "teachingUnits" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer"
          },
          "facilitator" : {
            "$ref" : "#/components/schemas/FacilitatorInfo"
          },
          "topic" : {
            "type" : "string"
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "EventDateRoomContingent" : {
        "required" : [ "begin", "end", "name", "rooms", "status" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "Example room contingent"
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "enum" : [ "BOOKED", "DELETED" ]
          },
          "begin" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "color" : {
            "type" : "string",
            "nullable" : true,
            "example" : "#FFF000"
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "rooms" : {
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/Room"
            }
          }
        }
      },
      "Room" : {
        "required" : [ "bedCount", "building", "hasSingleBeds", "id", "isActive", "name", "order", "roomType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "Unique name or number of the room",
            "nullable" : false,
            "readOnly" : true
          },
          "roomType" : {
            "nullable" : false,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/RoomType"
            } ]
          },
          "bedCount" : {
            "minimum" : 1,
            "type" : "integer",
            "nullable" : false,
            "readOnly" : true
          },
          "hasSingleBeds" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "building" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "location" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "isActive" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "roomProvider" : {
            "nullable" : true,
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "order" : {
            "type" : "integer",
            "nullable" : true,
            "readOnly" : true
          }
        }
      },
      "RoomType" : {
        "required" : [ "code", "isGuestFlatRate", "name", "nameOnInvoice", "order" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "Unique code for the room type"
          },
          "name" : {
            "type" : "string"
          },
          "nameOnInvoice" : {
            "type" : "string"
          },
          "externalDescription" : {
            "type" : "string"
          },
          "isGuestFlatRate" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "integer"
          }
        }
      },
      "EventDateExternalAccommodation" : {
        "required" : [ "capacity", "count", "externalAccommodation", "roomType" ],
        "type" : "object",
        "properties" : {
          "externalAccommodation" : {
            "$ref" : "#/components/schemas/ExternalAccommodation"
          },
          "roomType" : {
            "type" : "string"
          },
          "capacity" : {
            "minimum" : 1,
            "type" : "integer"
          },
          "count" : {
            "minimum" : 1,
            "type" : "integer"
          },
          "hasSingleBeds" : {
            "type" : "boolean"
          },
          "cancelationDate" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }
      },
      "ExternalAccommodation" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "EventDateCost" : {
        "required" : [ "grossAmount", "organization", "taxRate" ],
        "type" : "object",
        "properties" : {
          "grossAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "taxRate" : {
            "$ref" : "#/components/schemas/TaxRate"
          },
          "dateOfService" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "text" : {
            "type" : "string",
            "nullable" : true
          },
          "costCenter" : {
            "type" : "string",
            "nullable" : true
          },
          "costType" : {
            "type" : "string",
            "nullable" : true
          },
          "account" : {
            "type" : "string",
            "nullable" : true
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "invoiceAvailable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "paymentDate" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "profile" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "bankAccountData" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BankAccountData"
            } ]
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "BankAccountData" : {
        "type" : "object",
        "properties" : {
          "bankName" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Country"
            } ]
          },
          "iban" : {
            "type" : "string",
            "nullable" : true,
            "example" : "DE91100000000123456789"
          },
          "bic" : {
            "type" : "string",
            "nullable" : true,
            "example" : "AABSDE31"
          },
          "accountHolder" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "RevenueItem" : {
        "required" : [ "grossAmount", "organization", "status", "taxRate" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "POSTED", "INVOICED" ]
          },
          "grossAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "taxRate" : {
            "$ref" : "#/components/schemas/TaxRate"
          },
          "dateOfService" : {
            "type" : "string",
            "format" : "date"
          },
          "text" : {
            "type" : "string"
          },
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "costType" : {
            "type" : "string"
          },
          "account" : {
            "type" : "string"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "numberOfParticipants" : {
            "minimum" : 0,
            "type" : "integer"
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RevenueItem_payments"
            }
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "TaxRate" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "maximum" : 1,
            "minimum" : 0,
            "type" : "number",
            "format" : "double",
            "nullable" : false,
            "example" : 0.19
          }
        }
      },
      "EventDateEquipment" : {
        "required" : [ "begin", "count", "end", "equipment" ],
        "type" : "object",
        "properties" : {
          "equipment" : {
            "$ref" : "#/components/schemas/Equipment"
          },
          "count" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time"
          },
          "end" : {
            "type" : "string",
            "format" : "date-time"
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "Equipment" : {
        "required" : [ "id", "name", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "quantity" : {
            "type" : "integer",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "EventDateFacilitator" : {
        "required" : [ "profile" ],
        "type" : "object",
        "properties" : {
          "profile" : {
            "$ref" : "#/components/schemas/FacilitatorInfo"
          },
          "fee" : {
            "type" : "number",
            "format" : "double",
            "nullable" : true
          },
          "internalRemarks" : {
            "type" : "string",
            "nullable" : true
          },
          "additionalInfo" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "YesNoOptional" : {
        "type" : "string",
        "enum" : [ "YES", "NO", "OPTIONAL" ]
      },
      "Venue" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "streetAddress" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "streetAddress2" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "zipCode" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "country" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "readOnly" : true
          },
          "website" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "readOnly" : true
          },
          "directionMapUrl" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "readOnly" : true
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "isActive" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "EarlyArrivalMode" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "NOT_AVAILABLE", "NO_MEALS", "INCL_BREAKFAST", "INCL_DINNER_BREAKFAST" ]
          },
          "value" : {
            "type" : "integer",
            "enum" : [ 0, 1, 2, 3 ]
          }
        }
      },
      "LateDepartureMode" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "NOT_AVAILABLE", "NO_MEALS", "INCL_DINNER", "INCL_DINNER_BREAKFAST" ]
          },
          "value" : {
            "type" : "integer",
            "enum" : [ 0, 1, 2, 3 ]
          }
        }
      },
      "ObjectMetaInfo" : {
        "required" : [ "changedAt", "changedBy", "createdAt", "createdBy" ],
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "createdBy" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/User"
            } ]
          },
          "changedAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "changedBy" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/User"
            } ]
          }
        }
      },
      "AdditionalFieldWithValue" : {
        "required" : [ "field", "value" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdditionalField"
            } ]
          },
          "value" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/AnyValue"
            } ]
          }
        }
      },
      "AnyValue" : {
        "description" : "Can be any value, including `null`.",
        "nullable" : true
      },
      "AdditionalField" : {
        "required" : [ "id", "isDisplayedInLists", "name", "order", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true,
            "enum" : [ "TEXT_SINGLE_LINE", "TEXT_MULTI_LINE", "DATE", "NUMBER", "BOOLEAN", "SELECTION_SINGLE", "SELECTION_MULTI", "HEADING", "CURRENCY", "FORMATTED_TEXT" ]
          },
          "description" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "defaultValue" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "isDisplayedInLists" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "order" : {
            "type" : "integer",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "NamedIdReference" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "Label" : {
        "required" : [ "abbreviation", "externalName", "id", "internalName", "labelGroup", "order" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "abbreviation" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "internalName" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "externalName" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "externalDescription" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "imageUrl" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "example" : "#FF0000"
          },
          "order" : {
            "type" : "integer",
            "nullable" : false,
            "readOnly" : true
          },
          "labelGroup" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          }
        }
      },
      "Organization" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "nullable" : false,
            "example" : "MyOrganizationCode"
          },
          "name" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true,
            "example" : "My Organization Name"
          }
        }
      },
      "Salutation" : {
        "required" : [ "gender", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of this salutation as given in the administration",
            "example" : "Frau"
          },
          "gender" : {
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Gender"
            } ]
          }
        }
      },
      "Gender" : {
        "type" : "string",
        "enum" : [ "UNKNOWN", "DIVERSE", "FEMALE", "MALE" ]
      },
      "Profile" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModelProperties"
        }, {
          "$ref" : "#/components/schemas/ProfileProperties"
        }, {
          "$ref" : "#/components/schemas/ProfileRequiredProperties"
        } ]
      },
      "ProfileRequiredProperties" : {
        "required" : [ "name", "objectType", "salutation" ],
        "type" : "object"
      },
      "ProfileProperties" : {
        "type" : "object",
        "properties" : {
          "objectType" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true,
            "enum" : [ "PersonProfile", "OrganizationProfile", "FacilitatorProfile" ]
          },
          "salutation" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Salutation"
            } ]
          },
          "language" : {
            "type" : "string",
            "description" : "Language code",
            "nullable" : true
          },
          "labels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Label"
            }
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "alternativeEmail" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "effectiveInvoiceEmail" : {
            "type" : "string",
            "description" : "The email address that should be used to send invoices to",
            "format" : "email",
            "nullable" : true,
            "readOnly" : true
          },
          "website" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true
          },
          "phone1" : {
            "type" : "string",
            "nullable" : true
          },
          "phone2" : {
            "type" : "string",
            "nullable" : true
          },
          "phone3" : {
            "type" : "string",
            "nullable" : true
          },
          "faxNumber" : {
            "type" : "string",
            "nullable" : true
          },
          "primaryAddress" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/PostalAddress"
            } ]
          },
          "billingAddress" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress"
            } ]
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "information" : {
            "type" : "string",
            "nullable" : true
          },
          "isBlocked" : {
            "type" : "boolean",
            "nullable" : false,
            "default" : false
          },
          "blockedReason" : {
            "type" : "string",
            "nullable" : true
          },
          "bankAccountData" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BankAccountData"
            } ]
          },
          "taxNumber" : {
            "type" : "string",
            "nullable" : true
          },
          "vatId" : {
            "type" : "string",
            "nullable" : true
          },
          "customerNumber" : {
            "type" : "string",
            "nullable" : true
          },
          "additionalFields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdditionalFieldWithValue"
            }
          },
          "dataProtection" : {
            "$ref" : "#/components/schemas/ProfileProperties_dataProtection"
          },
          "linkedProfiles" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ProfileLink"
            }
          },
          "revenues" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/RevenueItem"
            }
          },
          "numberOfBookings" : {
            "minimum" : 0,
            "type" : "integer",
            "readOnly" : true
          },
          "numberOfInvoices" : {
            "minimum" : 0,
            "type" : "integer",
            "readOnly" : true
          },
          "numberOfPossibleDuplicates" : {
            "minimum" : 0,
            "type" : "integer",
            "readOnly" : true
          }
        }
      },
      "ProfileActivity" : {
        "required" : [ "begin", "category", "title", "type" ],
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "SYSTEM", "MANUAL" ]
          },
          "type" : {
            "$ref" : "#/components/schemas/ProfileActivity_type"
          },
          "title" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time"
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "actor" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/User"
            } ]
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "ProfileConsentHistoryEntry" : {
        "required" : [ "consentType", "date", "isPermitted", "source" ],
        "type" : "object",
        "properties" : {
          "consentType" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConsentType"
            } ]
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "source" : {
            "type" : "string",
            "nullable" : false
          },
          "comment" : {
            "type" : "string",
            "nullable" : true
          },
          "isPermitted" : {
            "type" : "boolean"
          },
          "legalBasis" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/LegalBasis"
            } ]
          }
        }
      },
      "ConsentType" : {
        "required" : [ "defaultValue", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false
          },
          "description" : {
            "type" : "string"
          },
          "defaultValue" : {
            "type" : "boolean"
          }
        }
      },
      "LegalBasis" : {
        "required" : [ "gdprReference", "name", "retentionPeriod" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "gdprReference" : {
            "type" : "string"
          },
          "retentionPeriod" : {
            "$ref" : "#/components/schemas/LegalBasis_retentionPeriod"
          }
        }
      },
      "ProfileLegalBasis" : {
        "required" : [ "legalBasis", "validFrom" ],
        "type" : "object",
        "properties" : {
          "legalBasis" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/LegalBasis"
            } ]
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "validTo" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "source" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "PostalAddress" : {
        "type" : "object",
        "properties" : {
          "careOf" : {
            "type" : "string",
            "nullable" : true
          },
          "streetAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "streetAddress2" : {
            "type" : "string",
            "nullable" : true
          },
          "zipCode" : {
            "type" : "string",
            "nullable" : true
          },
          "city" : {
            "type" : "string",
            "nullable" : true
          },
          "province" : {
            "type" : "string",
            "nullable" : true
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          }
        }
      },
      "BillingAddress" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "nameOrCompany" : {
              "type" : "string"
            },
            "email" : {
              "type" : "string",
              "format" : "email",
              "nullable" : true
            }
          }
        }, {
          "$ref" : "#/components/schemas/PostalAddress"
        } ]
      },
      "Country" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "ISO country code",
            "nullable" : false
          },
          "name" : {
            "type" : "string",
            "description" : "Country name",
            "readOnly" : true,
            "example" : "Germany"
          },
          "localizedName" : {
            "type" : "string",
            "description" : "Localized country name, depending on the system's locale",
            "readOnly" : true,
            "example" : "Allemagne"
          }
        },
        "nullable" : true
      },
      "PersonProfile" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Profile"
        }, {
          "$ref" : "#/components/schemas/PersonProfileProperties"
        }, {
          "$ref" : "#/components/schemas/PersonProfileRequiredProperties"
        } ]
      },
      "PersonProfileRequiredProperties" : {
        "required" : [ "lastName" ],
        "type" : "object"
      },
      "PersonProfileProperties" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "nullable" : true
          },
          "lastName" : {
            "type" : "string",
            "nullable" : false
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "additionalTitle" : {
            "maxLength" : 200,
            "type" : "string",
            "nullable" : true
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "profession" : {
            "type" : "string",
            "nullable" : true
          },
          "salutationSettings" : {
            "$ref" : "#/components/schemas/PersonProfileProperties_salutationSettings"
          },
          "preferredEmail" : {
            "type" : "string",
            "default" : "PRIVATE",
            "enum" : [ "PRIVATE", "ALTERNATIVE", "INVOICE", "PRIMARY_ORGANIZATION" ]
          },
          "preferredPhone" : {
            "type" : "string",
            "default" : "PRIVATE",
            "enum" : [ "PRIVATE", "ALTERNATIVE", "BUSINESS", "PRIMARY_ORGANIZATION" ]
          },
          "preferredAddress" : {
            "type" : "string",
            "default" : "PRIVATE",
            "enum" : [ "PRIVATE", "INVOICE", "PRIMARY_ORGANIZATION" ]
          },
          "preferredBillingAddress" : {
            "type" : "string",
            "default" : "PRIVATE",
            "enum" : [ "PRIVATE", "INVOICE", "PRIMARY_ORGANIZATION" ]
          },
          "preferredInvoiceEmail" : {
            "type" : "string",
            "default" : "PRIVATE",
            "enum" : [ "PRIVATE", "ALTERNATIVE", "INVOICE", "PRIMARY_ORGANIZATION" ]
          },
          "isSubscribedToNewsletter" : {
            "type" : "boolean"
          },
          "hasOnlineAccount" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "activities" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ProfileActivity"
            }
          },
          "certificates" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Certificate"
            }
          },
          "isFacilitator" : {
            "type" : "boolean",
            "description" : "When this is set to `true`, this person profile will be converted to a facilitator profile.",
            "writeOnly" : true
          }
        }
      },
      "ProfileLink" : {
        "required" : [ "isPrimary", "role", "target" ],
        "type" : "object",
        "properties" : {
          "target" : {
            "$ref" : "#/components/schemas/NamedIdReference"
          },
          "role" : {
            "type" : "string",
            "nullable" : false
          },
          "department" : {
            "type" : "string"
          },
          "addition" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "isPrimary" : {
            "type" : "boolean"
          }
        }
      },
      "OrganizationProfile" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Profile"
        }, {
          "$ref" : "#/components/schemas/OrganizationProfileProperties"
        }, {
          "$ref" : "#/components/schemas/OrganizationProfileRequiredProperties"
        } ]
      },
      "OrganizationProfileRequiredProperties" : {
        "required" : [ "name" ],
        "type" : "object"
      },
      "OrganizationProfileProperties" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false
          },
          "name2" : {
            "type" : "string"
          },
          "contactPerson" : {
            "type" : "string"
          },
          "parentOrganization" : {
            "$ref" : "#/components/schemas/OrganizationProfile"
          },
          "preferredEmail" : {
            "type" : "string",
            "enum" : [ "BUSINESS", "ALTERNATIVE", "INVOICE" ]
          },
          "preferredPhone" : {
            "type" : "string",
            "enum" : [ "PHONE1", "PHONE2", "PHONE3" ]
          },
          "preferredAddress" : {
            "type" : "string",
            "enum" : [ "BUSINESS", "INVOICE" ]
          },
          "preferredBillingAddress" : {
            "type" : "string",
            "enum" : [ "BUSINESS", "INVOICE" ]
          },
          "preferredInvoiceEmail" : {
            "type" : "string",
            "default" : "BUSINESS",
            "enum" : [ "BUSINESS", "ALTERNATIVE", "INVOICE" ]
          }
        }
      },
      "FacilitatorProfile" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PersonProfile"
        }, {
          "$ref" : "#/components/schemas/FacilitatorProfileProperties"
        } ]
      },
      "FacilitatorProfileProperties" : {
        "type" : "object",
        "properties" : {
          "qualifications" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Qualification"
            }
          },
          "remarks" : {
            "type" : "string",
            "nullable" : true
          },
          "portraitPictureUrl" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "readOnly" : true
          },
          "isActive" : {
            "type" : "boolean"
          },
          "isPublished" : {
            "type" : "boolean"
          },
          "info" : {
            "type" : "string",
            "nullable" : true
          },
          "assignedEventDates" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/NamedIdReference"
            }
          },
          "isFacilitator" : {
            "readOnly" : true
          }
        }
      },
      "Qualification" : {
        "required" : [ "isActive", "name", "order" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "isActive" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "integer"
          }
        }
      },
      "FacilitatorInfo" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "name" : {
            "type" : "string",
            "readOnly" : true,
            "example" : "Felicitas Facilitator"
          }
        }
      },
      "User" : {
        "required" : [ "isActive", "isContactPerson", "roleName", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "Unique username",
            "nullable" : false,
            "example" : "JaneDoe"
          },
          "firstName" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "example" : "Jane"
          },
          "lastName" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "example" : "Doe"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "readOnly" : true,
            "example" : "example@seminardesk.com"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "department" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "example" : "Event Management"
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true,
            "example" : "Administration"
          },
          "isContactPerson" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "isActive" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "memberOf" : {
            "type" : "array",
            "nullable" : true,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/UserGroup"
            }
          }
        }
      },
      "UserGroup" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "Sample Group Name"
          },
          "remarks" : {
            "type" : "string"
          }
        }
      },
      "NumericPrimaryKey" : {
        "type" : "integer",
        "format" : "int64"
      },
      "BookingOrProfileInvoicesList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          }
        }
      },
      "InvoicesList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseList"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          }
        } ]
      },
      "InvoiceProperties" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "nullable" : false,
            "enum" : [ "DRAFT", "POSTED", "CANCELED" ]
          },
          "organization" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Organization"
            } ]
          },
          "date" : {
            "type" : "string",
            "description" : "The invoice's date",
            "format" : "date",
            "nullable" : false
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The invoice's due date, could also be `null`",
            "format" : "date",
            "nullable" : true
          },
          "periodOfService" : {
            "description" : "The invoice's period of service, based upon all invoice items' periods of service",
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Period"
            } ]
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "enum" : [ "INVOICE", "CREDIT_INVOICE", "CANCELATION_INVOICE" ]
          },
          "originalInvoice" : {
            "$ref" : "#/components/schemas/InvoiceProperties_originalInvoice"
          },
          "recipient" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            }, {
              "type" : "object",
              "properties" : {
                "customerNumber" : {
                  "type" : "string",
                  "nullable" : true
                },
                "type" : {
                  "type" : "string",
                  "nullable" : false,
                  "enum" : [ "PERSON", "ORGANIZATION" ]
                }
              }
            } ]
          },
          "recipientName" : {
            "type" : "string",
            "description" : "The recipient's name copied during invoice posting",
            "readOnly" : true
          },
          "billingAddress" : {
            "description" : "The recipient's billing address (structured) copied during invoice posting",
            "readOnly" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress"
            } ]
          },
          "billingAddressFormatted" : {
            "type" : "string",
            "description" : "The recipient's billing address (formatted) copied during invoice posting",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "template" : {
            "type" : "string",
            "nullable" : false
          },
          "introductionText" : {
            "type" : "string",
            "nullable" : true
          },
          "closingText" : {
            "type" : "string",
            "nullable" : true
          },
          "isSplitInvoice" : {
            "type" : "boolean",
            "nullable" : false
          },
          "totalAmount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "paymentAmountAtCreation" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "currentPaymentAmount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "lastPaymentAt" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "balanceAtCreation" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "currentBalance" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "lastEmailSentAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "items" : {
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/InvoiceItem"
            }
          },
          "referenceNumbers" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "InvoiceRequiredProperties" : {
        "required" : [ "amount", "date", "isSplitInvoice", "items", "organization", "periodOfService", "recipient", "status", "template", "type" ],
        "type" : "object"
      },
      "Period" : {
        "required" : [ "begin", "end" ],
        "type" : "object",
        "properties" : {
          "begin" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          }
        }
      },
      "Invoice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModelProperties"
        }, {
          "$ref" : "#/components/schemas/InvoiceProperties"
        }, {
          "$ref" : "#/components/schemas/InvoiceRequiredProperties"
        } ]
      },
      "InvoiceItem" : {
        "required" : [ "grossAmount", "netAmount", "number", "periodOfService", "sources", "taxRate", "text" ],
        "type" : "object",
        "properties" : {
          "number" : {
            "minimum" : 1,
            "type" : "integer",
            "readOnly" : true
          },
          "text" : {
            "type" : "string",
            "nullable" : false
          },
          "periodOfService" : {
            "description" : "The item's period of service",
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Period"
            } ]
          },
          "grossAmount" : {
            "type" : "number",
            "format" : "double",
            "nullable" : false
          },
          "netAmount" : {
            "type" : "number",
            "format" : "double",
            "nullable" : false
          },
          "discountAmount" : {
            "type" : "number",
            "format" : "double",
            "nullable" : true
          },
          "taxRate" : {
            "nullable" : false,
            "allOf" : [ {
              "$ref" : "#/components/schemas/TaxRate"
            } ]
          },
          "eventDateName" : {
            "type" : "string",
            "nullable" : true
          },
          "guestName" : {
            "type" : "string",
            "nullable" : true
          },
          "sources" : {
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/NamedIdReference"
            }
          },
          "revenueSplitItems" : {
            "type" : "array",
            "nullable" : false,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/RevenueSplitItem"
            }
          }
        }
      },
      "RevenueSplitItem" : {
        "type" : "object",
        "properties" : {
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : false
          },
          "amount" : {
            "type" : "number",
            "format" : "double",
            "nullable" : false
          },
          "bookingAccount" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : true
          },
          "taxRate" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/TaxRate"
            } ]
          },
          "costType" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : true
          },
          "invoiceText" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "PaginationParameters" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Page number",
            "default" : 1
          },
          "size" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Size of the page",
            "default" : 20
          }
        }
      },
      "Error" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The HTTP status code associated with the problem"
          },
          "message" : {
            "type" : "string",
            "description" : "Details about the problem's cause",
            "nullable" : false
          },
          "code" : {
            "type" : "integer",
            "description" : "An optional error code representing the type of problem",
            "nullable" : true
          }
        },
        "readOnly" : true
      },
      "page" : {
        "nullable" : true,
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaginationParameters"
        } ]
      },
      "filter" : {
        "type" : "object",
        "properties" : {
          "additionalField" : {
            "type" : "string",
            "description" : "Filter by additional field, based on its ID",
            "nullable" : true,
            "example" : "23:MyFieldValue"
          },
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Filter by an external ID in the format `<ID of external system>:<System ID>`",
            "nullable" : true,
            "example" : "102"
          }
        }
      },
      "filter_1" : {
        "type" : "object",
        "properties" : {
          "beginAfter" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "beginBefore" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "endAfter" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "venue.id" : {
            "type" : "integer",
            "nullable" : true
          },
          "facilitator.id" : {
            "type" : "integer",
            "nullable" : true
          },
          "status.id" : {
            "type" : "integer",
            "nullable" : true
          },
          "event.id" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NumericPrimaryKey"
            } ]
          },
          "event.additionalField" : {
            "type" : "string",
            "description" : "Filter by *event's* additional field designated by the given ID",
            "nullable" : true,
            "example" : "23:MyFieldValue"
          },
          "attendanceType" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/BookingGuestAttendanceType"
            } ]
          },
          "onlyPublished" : {
            "type" : "boolean",
            "nullable" : true
          },
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Filter by an external system ID in the format `<ID of external system>:<System ID>`",
            "nullable" : true,
            "example" : "102"
          }
        },
        "nullable" : true
      },
      "filter_2" : {
        "type" : "object",
        "properties" : {
          "isSubscribedToNewsletter" : {
            "type" : "boolean",
            "nullable" : true
          },
          "isBlocked" : {
            "type" : "boolean",
            "nullable" : true
          },
          "customerNumber" : {
            "type" : "string",
            "nullable" : true
          },
          "additionalField" : {
            "type" : "string",
            "description" : "Filter by value of additional field designated by the given ID",
            "nullable" : true,
            "example" : "42:MyFieldValue"
          },
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Filter by an external system ID in the format `<ID of external system>:<System ID>`",
            "nullable" : true,
            "example" : "102"
          }
        },
        "nullable" : true
      },
      "filter_3" : {
        "type" : "object",
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Filter by an external system ID in the format `<ID of external system>:<System ID>`",
            "nullable" : true,
            "example" : "102"
          }
        }
      },
      "filter_4" : {
        "type" : "object",
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Filter by an external system ID in the format `<ID of external system>:<System ID>`",
            "nullable" : true,
            "example" : "102"
          }
        }
      },
      "BaseList_meta" : {
        "type" : "object",
        "properties" : {
          "totalCount" : {
            "minimum" : 0,
            "type" : "integer"
          },
          "page" : {
            "minimum" : 1,
            "type" : "integer",
            "default" : 1
          },
          "size" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "default" : 20
          },
          "totalPages" : {
            "minimum" : 1,
            "type" : "integer"
          },
          "firstPage" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : false
          },
          "lastPage" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : false
          },
          "nextPage" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true
          },
          "previousPage" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true
          }
        }
      },
      "Certificate_takeoverSourceCertificate" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "validUntil" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        },
        "description" : "In case there was a \"takeover\" from a required certificate, this will be the reference to this very certificate",
        "nullable" : true,
        "readOnly" : true
      },
      "BookingGuest_guest" : {
        "type" : "object",
        "properties" : {
          "profile" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "age" : {
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "gender" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Gender"
            } ]
          }
        },
        "description" : "Either a profile OR name plus optionally age and gender",
        "nullable" : false
      },
      "EventProperties_bookingSettings" : {
        "required" : [ "allowChildren", "isMultiPart", "mode" ],
        "type" : "object",
        "properties" : {
          "allowChildren" : {
            "type" : "boolean",
            "nullable" : false,
            "default" : false
          },
          "isMultiPart" : {
            "type" : "boolean",
            "nullable" : false,
            "default" : false
          },
          "mode" : {
            "type" : "string",
            "nullable" : false,
            "default" : "SEPARATE_BOOKING_PER_DATE",
            "enum" : [ "SEPARATE_BOOKING_PER_DATE", "SINGLE_BOOKING" ]
          },
          "specialRequestsList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "additionalFieldsList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "additionalFieldsAdultsList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "additionalFieldsChildrenList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "invoiceTemplate" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "nullable" : false
      },
      "EventProperties_publishingSettings" : {
        "required" : [ "status", "title" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "UNPUBLISHED", "PUBLISHED" ]
          },
          "bookingPageUrl" : {
            "type" : "string",
            "format" : "uri",
            "readOnly" : true
          },
          "title" : {
            "type" : "string"
          },
          "subTitle" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "At the moment, contains just base information from the \"booking page settings\". Might be extended in the future.",
        "nullable" : false
      },
      "EventDateProperties_receptionSettings" : {
        "required" : [ "begin", "end", "hasReception" ],
        "type" : "object",
        "properties" : {
          "hasReception" : {
            "type" : "boolean",
            "nullable" : false
          },
          "begin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false
          },
          "staff" : {
            "type" : "string",
            "nullable" : true
          },
          "location" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "nullable" : true
      },
      "EventDateProperties_serviceAndPriceSettings" : {
        "type" : "object",
        "properties" : {
          "hasAttendanceFees" : {
            "type" : "boolean",
            "readOnly" : true,
            "default" : false
          },
          "attendanceFeePriceList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "hasMisc" : {
            "type" : "boolean",
            "readOnly" : true,
            "default" : false
          },
          "miscPriceList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "hasAccommodation" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/YesNoOptional"
            } ],
            "default" : "NO"
          },
          "accommodationPriceList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          },
          "hasMeals" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/YesNoOptional"
            } ],
            "default" : "NO"
          },
          "mealsPriceList" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/NamedIdReference"
            } ]
          }
        },
        "nullable" : true
      },
      "EventDateProperties_publishingSettings" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true,
            "example" : "My Booking Page Sample Event Date Name"
          },
          "priceInfo" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "default" : "available",
            "enum" : [ "available", "limited", "wait_list", "fully_booked", "hidden", "hidden_on_list", "canceled" ]
          },
          "autoUpdateStatus" : {
            "type" : "boolean",
            "nullable" : false,
            "default" : false
          },
          "registrationPeriodBegin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "registrationPeriodEnd" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "publishingPeriodBegin" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "publishingPeriodEnd" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "allowFlexibleAttendance" : {
            "type" : "boolean",
            "nullable" : false
          },
          "attendanceStartUntil" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "attendanceEndFrom" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "minAttendanceLength" : {
            "type" : "integer",
            "nullable" : true
          },
          "maxAttendanceLength" : {
            "type" : "integer",
            "nullable" : true
          },
          "allowFlexibleStay" : {
            "type" : "boolean",
            "nullable" : false
          },
          "earlyArrivalMode" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/EarlyArrivalMode"
            } ]
          },
          "lateDepartureMode" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/LateDepartureMode"
            } ]
          },
          "additionalInfo" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "nullable" : true
      },
      "RevenueItem_payments" : {
        "required" : [ "amount", "date", "method" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "enum" : [ "CASH", "BANK_TRANSFER" ]
          },
          "amount" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "date" : {
            "type" : "string",
            "format" : "date"
          }
        }
      },
      "ProfileProperties_dataProtection" : {
        "type" : "object",
        "properties" : {
          "legalBasisEntries" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ProfileLegalBasis"
            }
          },
          "consentHistoryEntries" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ProfileConsentHistoryEntry"
            }
          }
        },
        "nullable" : true,
        "readOnly" : true
      },
      "ProfileActivity_type" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "LegalBasis_retentionPeriod" : {
        "required" : [ "isStandard", "name", "numberOfDays" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "numberOfDays" : {
            "minimum" : -1,
            "type" : "integer",
            "description" : "Number of days after inactive profiles should be deleted. 0 indicates immediate delete, -1 indicates no deletion"
          },
          "isStandard" : {
            "type" : "boolean"
          }
        }
      },
      "PersonProfileProperties_salutationSettings" : {
        "required" : [ "preferredSalutation" ],
        "type" : "object",
        "properties" : {
          "preferredSalutation" : {
            "type" : "string",
            "enum" : [ "INFORMAL", "FORMAL" ]
          },
          "formalSalutation" : {
            "type" : "string"
          },
          "informalSalutation" : {
            "type" : "string"
          },
          "letterSalutation" : {
            "type" : "string",
            "description" : "The letter salutation is used in the address section of a letter naming the recipient of the letter"
          }
        }
      },
      "InvoiceProperties_originalInvoice" : {
        "required" : [ "date", "id", "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NumericPrimaryKey"
          },
          "number" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "nullable" : false
          }
        },
        "description" : "In case of a cancelation invoice, this will contain a reference to the \"original invoice\"",
        "nullable" : true
      }
    },
    "responses" : {
      "UnauthorizedError" : {
        "description" : "API key is missing or invalid",
        "headers" : {
          "WWW_Authenticate" : {
            "style" : "simple",
            "explode" : false,
            "schema" : {
              "type" : "string"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError" : {
        "description" : "API key does not have required permissions",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError" : {
        "description" : "The resource does not exist",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequestError" : {
        "description" : "Request cannot be completed due to invalid input or because the item's state does not permit a certain change",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "ConflictError" : {
        "description" : "Request cannot be completed due to a conflict",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "NotImplementedError" : {
        "description" : "Request cannot be handled, private API not active or required module not enabled",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters" : {
      "ItemId" : {
        "name" : "id",
        "in" : "path",
        "description" : "Numeric ID of the item",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "minimum" : 1,
          "type" : "integer",
          "format" : "int64"
        }
      },
      "FieldId" : {
        "name" : "fieldId",
        "in" : "path",
        "description" : "Numeric ID of the additional field",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "minimum" : 1,
          "type" : "integer",
          "format" : "int64"
        }
      },
      "Pagination" : {
        "name" : "page",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/page"
        }
      },
      "SearchTerm" : {
        "name" : "searchTerm",
        "in" : "query",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "nullable" : true
        }
      },
      "EventFilter" : {
        "name" : "filter",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/filter"
        }
      },
      "InvoiceFilter" : {
        "name" : "filter",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/filter_4"
        }
      },
      "BookingFilter" : {
        "name" : "filter",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/filter_3"
        }
      },
      "ProfileFilter" : {
        "name" : "filter",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/filter_2"
        }
      },
      "EventDateFilter" : {
        "name" : "filter",
        "in" : "query",
        "required" : false,
        "style" : "deepObject",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/filter_1"
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "description" : "API key generated in SeminarDesk backend",
        "name" : "X-API-Key",
        "in" : "header"
      }
    }
  }
}